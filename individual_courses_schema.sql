-- BridgeFacile Individual Courses Database Schema
-- Implementation Script for Supabase
-- Date: December 30, 2024

-- =============================================================================
-- MAIN TABLE: individual_courses
-- Core table for managing individual course offerings
-- =============================================================================

CREATE TABLE public.individual_courses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id BIGINT REFERENCES public.students(id) ON DELETE CASCADE,
    instructor_name TEXT DEFAULT 'Thomas Joannes',
    course_status TEXT CHECK (course_status IN ('inquiry', 'quoted', 'confirmed', 'in_progress', 'completed', 'cancelled')) DEFAULT 'inquiry',
    
    -- Scheduling Information
    preferred_schedule TEXT, -- Student's preferred schedule description
    actual_schedule JSONB, -- Confirmed schedule as JSON array of sessions
    total_hours INTEGER, -- Total hours of instruction
    sessions_completed INTEGER DEFAULT 0,
    
    -- Pricing Information
    quoted_price DECIMAL(10,2), -- Custom quoted price
    price_per_hour DECIMAL(10,2), -- Hourly rate
    payment_status TEXT CHECK (payment_status IN ('pending', 'partial', 'paid', 'refunded')) DEFAULT 'pending',
    
    -- Course Customization
    student_level TEXT CHECK (student_level IN ('beginner', 'intermediate', 'advanced', 'expert')),
    specific_goals TEXT, -- Student's specific learning objectives
    custom_curriculum JSONB, -- Customized lesson plan as JSON
    learning_pace TEXT CHECK (learning_pace IN ('slow', 'normal', 'fast', 'intensive')),
    
    -- Communication and Notes
    initial_inquiry TEXT, -- Student's initial message/requirements
    instructor_notes TEXT, -- Private notes for instructor
    student_feedback TEXT, -- Student feedback during course
    
    -- Timestamps
    inquiry_date TIMESTAMPTZ DEFAULT NOW(),
    quote_sent_date TIMESTAMPTZ,
    course_start_date TIMESTAMPTZ,
    course_end_date TIMESTAMPTZ,
    last_session_date TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- =============================================================================
-- INDEXES for individual_courses table
-- =============================================================================

-- Index for student lookups
CREATE INDEX idx_individual_courses_student_id ON public.individual_courses(student_id);

-- Index for status queries
CREATE INDEX idx_individual_courses_status ON public.individual_courses(course_status);

-- Index for scheduling queries
CREATE INDEX idx_individual_courses_dates ON public.individual_courses(course_start_date, course_end_date);

-- Index for payment tracking
CREATE INDEX idx_individual_courses_payment ON public.individual_courses(payment_status);

-- =============================================================================
-- UPDATE EXISTING TABLE: contacts
-- Add columns to support individual course inquiries
-- =============================================================================

-- Add course type preference to contacts table
ALTER TABLE public.contacts ADD COLUMN IF NOT EXISTS course_type_interest TEXT CHECK (course_type_interest IN ('live_group', 'autonomous', 'individual', 'multiple', 'undecided'));

-- Add urgency level for individual course inquiries
ALTER TABLE public.contacts ADD COLUMN IF NOT EXISTS urgency_level TEXT CHECK (urgency_level IN ('low', 'medium', 'high', 'urgent')) DEFAULT 'medium';

-- Add budget range indication
ALTER TABLE public.contacts ADD COLUMN IF NOT EXISTS budget_range TEXT;

-- Add availability information
ALTER TABLE public.contacts ADD COLUMN IF NOT EXISTS availability_info TEXT;

-- Link to individual course if inquiry leads to course creation
ALTER TABLE public.contacts ADD COLUMN IF NOT EXISTS individual_course_id BIGINT REFERENCES public.individual_courses(id);

-- =============================================================================
-- TABLE: individual_sessions
-- Track individual sessions within an individual course
-- =============================================================================

CREATE TABLE public.individual_sessions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    individual_course_id BIGINT REFERENCES public.individual_courses(id) ON DELETE CASCADE,
    
    -- Session Details
    session_number INTEGER NOT NULL,
    session_date TIMESTAMPTZ NOT NULL,
    duration_minutes INTEGER DEFAULT 60,
    session_status TEXT CHECK (session_status IN ('scheduled', 'completed', 'cancelled', 'rescheduled')) DEFAULT 'scheduled',
    
    -- Session Content
    topics_covered TEXT[],
    lesson_plan TEXT,
    homework_assigned TEXT,
    student_performance TEXT,
    
    -- Technical Details
    meeting_link TEXT, -- Video conference link
    recording_link TEXT, -- Session recording if available
    materials_shared TEXT[], -- Links to shared materials
    
    -- Notes and Feedback
    instructor_notes TEXT,
    student_questions TEXT,
    next_session_prep TEXT,
    
    -- Timestamps
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(individual_course_id, session_number)
);

-- =============================================================================
-- INDEXES for individual_sessions table
-- =============================================================================

-- Index for course session lookups
CREATE INDEX idx_individual_sessions_course_id ON public.individual_sessions(individual_course_id);

-- Index for scheduling queries
CREATE INDEX idx_individual_sessions_date ON public.individual_sessions(session_date);

-- Index for status tracking
CREATE INDEX idx_individual_sessions_status ON public.individual_sessions(session_status);

-- =============================================================================
-- UPDATE EXISTING TABLE: subscriptions
-- Add support for individual course subscriptions
-- =============================================================================

-- Add support for individual course subscriptions
ALTER TABLE public.subscriptions ADD COLUMN IF NOT EXISTS is_individual_course BOOLEAN DEFAULT FALSE;

-- Link to individual course details
ALTER TABLE public.subscriptions ADD COLUMN IF NOT EXISTS individual_course_id BIGINT REFERENCES public.individual_courses(id);

-- Custom pricing for individual courses
ALTER TABLE public.subscriptions ADD COLUMN IF NOT EXISTS custom_price DECIMAL(10,2);

-- Flexible duration for individual courses
ALTER TABLE public.subscriptions ADD COLUMN IF NOT EXISTS custom_duration_hours INTEGER;

-- =============================================================================
-- TABLE: course_quotes
-- Manage the quoting process for individual courses
-- =============================================================================

CREATE TABLE public.course_quotes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    individual_course_id BIGINT REFERENCES public.individual_courses(id) ON DELETE CASCADE,
    contact_id BIGINT REFERENCES public.contacts(id),
    
    -- Quote Details
    quote_number TEXT UNIQUE NOT NULL, -- Format: IQ-YYYY-NNNN
    total_price DECIMAL(10,2) NOT NULL,
    hourly_rate DECIMAL(10,2) NOT NULL,
    estimated_hours INTEGER NOT NULL,
    
    -- Quote Breakdown
    base_price DECIMAL(10,2),
    customization_fee DECIMAL(10,2) DEFAULT 0,
    materials_fee DECIMAL(10,2) DEFAULT 0,
    discount_amount DECIMAL(10,2) DEFAULT 0,
    
    -- Quote Status
    quote_status TEXT CHECK (quote_status IN ('draft', 'sent', 'viewed', 'accepted', 'rejected', 'expired', 'revised')) DEFAULT 'draft',
    
    -- Validity
    valid_until TIMESTAMPTZ NOT NULL,
    
    -- Terms and Conditions
    terms_conditions TEXT,
    payment_terms TEXT DEFAULT 'Payment due before course start',
    cancellation_policy TEXT,
    
    -- Communication
    quote_message TEXT, -- Message sent with quote
    client_response TEXT, -- Client's response to quote
    
    -- Timestamps
    created_at TIMESTAMPTZ DEFAULT NOW(),
    sent_at TIMESTAMPTZ,
    viewed_at TIMESTAMPTZ,
    responded_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- =============================================================================
-- QUOTE NUMBER GENERATION FUNCTIONS
-- =============================================================================

-- Function to generate quote numbers
CREATE OR REPLACE FUNCTION generate_quote_number()
RETURNS TEXT AS $$
DECLARE
    year_part TEXT;
    sequence_part TEXT;
    next_number INTEGER;
BEGIN
    year_part := EXTRACT(YEAR FROM NOW())::TEXT;
    
    -- Get next sequence number for the current year
    SELECT COALESCE(MAX(CAST(SUBSTRING(quote_number FROM 'IQ-' || year_part || '-(.*)') AS INTEGER)), 0) + 1
    INTO next_number
    FROM public.course_quotes
    WHERE quote_number LIKE 'IQ-' || year_part || '-%';
    
    sequence_part := LPAD(next_number::TEXT, 4, '0');
    
    RETURN 'IQ-' || year_part || '-' || sequence_part;
END;
$$ LANGUAGE plpgsql;

-- Trigger function to auto-generate quote numbers
CREATE OR REPLACE FUNCTION set_quote_number()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.quote_number IS NULL OR NEW.quote_number = '' THEN
        NEW.quote_number := generate_quote_number();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for automatic quote number generation
CREATE TRIGGER trigger_set_quote_number
    BEFORE INSERT ON public.course_quotes
    FOR EACH ROW
    EXECUTE FUNCTION set_quote_number();

-- =============================================================================
-- ROW LEVEL SECURITY POLICIES
-- =============================================================================

-- Individual Courses Table RLS
ALTER TABLE public.individual_courses ENABLE ROW LEVEL SECURITY;

-- Allow instructors to manage all individual courses
CREATE POLICY "Instructors can manage individual courses" ON public.individual_courses
FOR ALL TO authenticated
USING (auth.jwt() ->> 'role' = 'instructor')
WITH CHECK (auth.jwt() ->> 'role' = 'instructor');

-- Allow students to view their own courses
CREATE POLICY "Students can view own individual courses" ON public.individual_courses
FOR SELECT TO authenticated
USING (student_id = (auth.jwt() ->> 'sub')::BIGINT);

-- Individual Sessions Table RLS
ALTER TABLE public.individual_sessions ENABLE ROW LEVEL SECURITY;

-- Allow instructors to manage all sessions
CREATE POLICY "Instructors can manage individual sessions" ON public.individual_sessions
FOR ALL TO authenticated
USING (auth.jwt() ->> 'role' = 'instructor')
WITH CHECK (auth.jwt() ->> 'role' = 'instructor');

-- Allow students to view sessions for their courses
CREATE POLICY "Students can view own individual sessions" ON public.individual_sessions
FOR SELECT TO authenticated
USING (
    individual_course_id IN (
        SELECT id FROM public.individual_courses 
        WHERE student_id = (auth.jwt() ->> 'sub')::BIGINT
    )
);

-- Course Quotes Table RLS
ALTER TABLE public.course_quotes ENABLE ROW LEVEL SECURITY;

-- Allow instructors to manage all quotes
CREATE POLICY "Instructors can manage course quotes" ON public.course_quotes
FOR ALL TO authenticated
USING (auth.jwt() ->> 'role' = 'instructor')
WITH CHECK (auth.jwt() ->> 'role' = 'instructor');

-- Allow anonymous users to view quotes they receive (via secure link)
CREATE POLICY "Allow quote viewing via secure access" ON public.course_quotes
FOR SELECT TO anon
USING (true); -- Additional security through application-level token validation

-- =============================================================================
-- USEFUL VIEWS FOR REPORTING
-- =============================================================================

-- View for individual course overview
CREATE OR REPLACE VIEW individual_course_overview AS
SELECT 
    ic.id,
    ic.course_status,
    ic.student_level,
    ic.total_hours,
    ic.sessions_completed,
    ic.quoted_price,
    ic.payment_status,
    ic.course_start_date,
    ic.course_end_date,
    s.pseudo as student_name,
    s.email as student_email,
    COUNT(iss.id) as total_sessions_scheduled,
    COUNT(CASE WHEN iss.session_status = 'completed' THEN 1 END) as sessions_completed_count
FROM public.individual_courses ic
LEFT JOIN public.students s ON ic.student_id = s.id
LEFT JOIN public.individual_sessions iss ON ic.id = iss.individual_course_id
GROUP BY ic.id, s.pseudo, s.email;

-- View for quote tracking
CREATE OR REPLACE VIEW quote_tracking AS
SELECT 
    cq.id,
    cq.quote_number,
    cq.total_price,
    cq.quote_status,
    cq.created_at,
    cq.sent_at,
    cq.valid_until,
    c.first_name,
    c.last_name,
    c.email,
    ic.course_status
FROM public.course_quotes cq
LEFT JOIN public.contacts c ON cq.contact_id = c.id
LEFT JOIN public.individual_courses ic ON cq.individual_course_id = ic.id;

-- =============================================================================
-- SAMPLE DATA INSERTION (Optional - for testing)
-- =============================================================================

-- Insert sample individual course inquiry
-- INSERT INTO public.individual_courses (
--     student_id, 
--     course_status, 
--     student_level, 
--     specific_goals, 
--     learning_pace,
--     initial_inquiry
-- ) VALUES (
--     1, -- Assuming student with ID 1 exists
--     'inquiry',
--     'beginner',
--     'Learn bridge basics quickly for upcoming tournament',
--     'intensive',
--     'I need to learn bridge as quickly as possible for a company tournament next month.'
-- );

-- =============================================================================
-- COMPLETION MESSAGE
-- =============================================================================

-- Display success message
DO $$
BEGIN
    RAISE NOTICE 'BridgeFacile Individual Courses Database Schema has been successfully created!';
    RAISE NOTICE 'Tables created: individual_courses, individual_sessions, course_quotes';
    RAISE NOTICE 'Tables updated: contacts, subscriptions';
    RAISE NOTICE 'Views created: individual_course_overview, quote_tracking';
    RAISE NOTICE 'RLS policies and indexes have been applied.';
    RAISE NOTICE 'The database is now ready to support individual course offerings.';
END $$;

